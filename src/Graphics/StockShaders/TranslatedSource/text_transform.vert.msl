#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct ChunkData
{
    float4x4 MatrixTransform;
    float4 Color;
    float DistanceRange;
    uint FontIndex;
    char _m0_final_padding[8];
};

struct type_StructuredBuffer_ChunkData
{
    ChunkData _m0[1];
};

struct type_UniformBlock
{
    float4x4 ViewProjectionMatrix;
};

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float4 out_var_TEXCOORD1 [[user(locn1)]];
    float out_var_TEXCOORD2 [[user(locn2)]];
    uint out_var_TEXCOORD3 [[user(locn3)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float2 in_var_TEXCOORD0 [[attribute(0)]];
    float2 in_var_TEXCOORD1 [[attribute(1)]];
    uint in_var_TEXCOORD2 [[attribute(2)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_ChunkData& ChunkDataBuffer [[buffer(1)]])
{
    main0_out out = {};
    out.out_var_TEXCOORD0 = in.in_var_TEXCOORD1;
    out.out_var_TEXCOORD1 = ChunkDataBuffer._m0[in.in_var_TEXCOORD2].Color;
    out.out_var_TEXCOORD2 = ChunkDataBuffer._m0[in.in_var_TEXCOORD2].DistanceRange;
    out.out_var_TEXCOORD3 = ChunkDataBuffer._m0[in.in_var_TEXCOORD2].FontIndex;
    out.gl_Position = (UniformBlock.ViewProjectionMatrix * ChunkDataBuffer._m0[in.in_var_TEXCOORD2].MatrixTransform) * float4(in.in_var_TEXCOORD0, 0.0, 1.0);
    return out;
}

